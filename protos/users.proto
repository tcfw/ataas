syntax = "proto3";

package ataas.users;
option go_package = "pm.tcfw.com.au/source/ataas/api/pb/users;users";

import "google/api/annotations.proto";
import "gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;


message User {
	enum Status {
		PENDING = 0;
		ACTIVE = 1;
		DELETED = 2;
	};

    string id = 1;
	Status status = 2;
	
    string firstName = 3;
    string lastName = 4;
    string email = 5;
	
    int64 createdAt = 6;
	int64 updatedAt = 7;
	int64 deletedAt = 8;
	
	string password = 9;
	
    map<string, bytes> metadata = 10;
    MFA mfa = 11;
    
    string account = 12;
}

message UserRequest {
    oneof query {
        string id = 1;
        string email = 2;
	}
	
    enum Status {
        ACTIVE = 0;
        PENDING = 1;
        DELETED = 2;
        ANY = 99;
	}
	
    Status status = 3;
}

message UserList {
    repeated User users = 1;
    int64 total = 2;
}

message PasswordUpdateRequest {
    string id = 1;
    string password = 2;
    string current_password = 3;
}

message UpdateRequest {
    string id = 1;
    User user = 2;
}

message AuthRequest {
    string email = 1;
    string password = 2;
}

message MFAFIDO {
    bytes id = 1;
    bytes pk = 2;
    string attestationType = 3;
    FIDOAuthenticator authenticator = 4;
}

message FIDOAuthenticator {
    bytes AAGUID = 1;
    uint32 SignCount = 2;
    bool CloneWarning = 3;
}

message MFASMS {
    string mobile = 1;
}

message MFATOTP {
    string key = 1;
    repeated string backupCodes = 2;
}

message MFA {
    oneof MFA {
        MFASMS SMS = 1;
        MFATOTP TOTP = 2;
        MFAFIDO FIDO = 3;
    }
}

message MFARegistration {
    string id = 1;
    MFA mfa = 2;
}

message ValidateRequest {
    string email = 1;
    string token = 2;
}

message CreateRequest {
    User user = 1;
    string recaptcha = 2;
}

message ListRequest {
	int32 limit = 1;
    string page_start = 2;
    int64 offset = 3;
}

message ForgotPasswordRequest {
    string email = 1;
}

message ResetPasswordRequest {
    string email = 1;
    string token = 2;
    string password = 3;
}

message Empty {}

service UserService {
    //External
    rpc Create(CreateRequest) returns (User) {
        option (google.api.http) = {
            post: "/v1/auth/register"
            body: "*"
        };
    };

    rpc ValidateAccount(ValidateRequest) returns (Empty) {
        option (google.api.http) = {
            post: "/v1/auth/validate_account"
            body: "*"
        };
    };

    rpc Delete(UserRequest) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/a/users/{id}/delete"

            additional_bindings {
                post: "/v1/me/delete"
                body: "*"
            }
        };

    };

    rpc Get(UserRequest) returns (User) {
        option (google.api.http) = {
            get: "/v1/a/users/{id}"
        };
    };
    
    rpc List(ListRequest) returns (UserList) {
        option (google.api.http) = {
            get: "/v1/a/users"
        };
    };

    rpc SetPassword(PasswordUpdateRequest) returns (Empty) {
        option (google.api.http) = {
            post: "/v1/a/users/{id}/password"
            body: "*"
            
            additional_bindings {
                post: "/v1/me/password"
                body: "*"
            }
        };
    };

    rpc Update(UpdateRequest) returns (User) {
        option (google.api.http) = {
            post: "/v1/a/users/{id}"
            body: "*"
            
            additional_bindings {
                post: "/v1/me"
                body: "*"
            }
        };
    };
    
	rpc Me(Empty) returns (User) {
        option (google.api.http) = {
            get: "/v1/me"
        };
    };

    rpc ForgotPassword(ForgotPasswordRequest) returns (Empty) {
        option (google.api.http) = {
            post: "/v1/forgotpassword"
            body: "*"
        };
    };

    rpc ResetPassword(ResetPasswordRequest) returns (Empty) {
        option (google.api.http) = {
            post: "/v1/resetpassword"
            body: "*"
        };
    }

    //Internal
    rpc Find(UserRequest) returns (User);
    rpc Amend(UpdateRequest) returns (User);
}