// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ticks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HistoryServiceClient is the client API for HistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryServiceClient interface {
	Trades(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TradesResponse, error)
	TradesRange(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*TradesResponse, error)
	TradesRangeStream(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (HistoryService_TradesRangeStreamClient, error)
	Candles(ctx context.Context, in *CandlesRequest, opts ...grpc.CallOption) (*CandlesResponse, error)
}

type historyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryServiceClient(cc grpc.ClientConnInterface) HistoryServiceClient {
	return &historyServiceClient{cc}
}

func (c *historyServiceClient) Trades(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TradesResponse, error) {
	out := new(TradesResponse)
	err := c.cc.Invoke(ctx, "/trader.ticks.HistoryService/Trades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) TradesRange(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*TradesResponse, error) {
	out := new(TradesResponse)
	err := c.cc.Invoke(ctx, "/trader.ticks.HistoryService/TradesRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) TradesRangeStream(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (HistoryService_TradesRangeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HistoryService_ServiceDesc.Streams[0], "/trader.ticks.HistoryService/TradesRangeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &historyServiceTradesRangeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HistoryService_TradesRangeStreamClient interface {
	Recv() (*Trade, error)
	grpc.ClientStream
}

type historyServiceTradesRangeStreamClient struct {
	grpc.ClientStream
}

func (x *historyServiceTradesRangeStreamClient) Recv() (*Trade, error) {
	m := new(Trade)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *historyServiceClient) Candles(ctx context.Context, in *CandlesRequest, opts ...grpc.CallOption) (*CandlesResponse, error) {
	out := new(CandlesResponse)
	err := c.cc.Invoke(ctx, "/trader.ticks.HistoryService/Candles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryServiceServer is the server API for HistoryService service.
// All implementations must embed UnimplementedHistoryServiceServer
// for forward compatibility
type HistoryServiceServer interface {
	Trades(context.Context, *GetRequest) (*TradesResponse, error)
	TradesRange(context.Context, *RangeRequest) (*TradesResponse, error)
	TradesRangeStream(*RangeRequest, HistoryService_TradesRangeStreamServer) error
	Candles(context.Context, *CandlesRequest) (*CandlesResponse, error)
	mustEmbedUnimplementedHistoryServiceServer()
}

// UnimplementedHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoryServiceServer struct {
}

func (UnimplementedHistoryServiceServer) Trades(context.Context, *GetRequest) (*TradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trades not implemented")
}
func (UnimplementedHistoryServiceServer) TradesRange(context.Context, *RangeRequest) (*TradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesRange not implemented")
}
func (UnimplementedHistoryServiceServer) TradesRangeStream(*RangeRequest, HistoryService_TradesRangeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TradesRangeStream not implemented")
}
func (UnimplementedHistoryServiceServer) Candles(context.Context, *CandlesRequest) (*CandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Candles not implemented")
}
func (UnimplementedHistoryServiceServer) mustEmbedUnimplementedHistoryServiceServer() {}

// UnsafeHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryServiceServer will
// result in compilation errors.
type UnsafeHistoryServiceServer interface {
	mustEmbedUnimplementedHistoryServiceServer()
}

func RegisterHistoryServiceServer(s grpc.ServiceRegistrar, srv HistoryServiceServer) {
	s.RegisterService(&HistoryService_ServiceDesc, srv)
}

func _HistoryService_Trades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).Trades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trader.ticks.HistoryService/Trades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).Trades(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_TradesRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).TradesRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trader.ticks.HistoryService/TradesRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).TradesRange(ctx, req.(*RangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_TradesRangeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HistoryServiceServer).TradesRangeStream(m, &historyServiceTradesRangeStreamServer{stream})
}

type HistoryService_TradesRangeStreamServer interface {
	Send(*Trade) error
	grpc.ServerStream
}

type historyServiceTradesRangeStreamServer struct {
	grpc.ServerStream
}

func (x *historyServiceTradesRangeStreamServer) Send(m *Trade) error {
	return x.ServerStream.SendMsg(m)
}

func _HistoryService_Candles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).Candles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trader.ticks.HistoryService/Candles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).Candles(ctx, req.(*CandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryService_ServiceDesc is the grpc.ServiceDesc for HistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trader.ticks.HistoryService",
	HandlerType: (*HistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trades",
			Handler:    _HistoryService_Trades_Handler,
		},
		{
			MethodName: "TradesRange",
			Handler:    _HistoryService_TradesRange_Handler,
		},
		{
			MethodName: "Candles",
			Handler:    _HistoryService_Candles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TradesRangeStream",
			Handler:       _HistoryService_TradesRangeStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ticks.proto",
}
