// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package passport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassportSeviceClient is the client API for PassportSevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassportSeviceClient interface {
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error)
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	SocialLogin(ctx context.Context, in *SocialRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	RevokeToken(ctx context.Context, in *Revoke, opts ...grpc.CallOption) (*Empty, error)
	RevokeAllTokens(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Sessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionList, error)
}

type passportSeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassportSeviceClient(cc grpc.ClientConnInterface) PassportSeviceClient {
	return &passportSeviceClient{cc}
}

func (c *passportSeviceClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error) {
	out := new(VerifyTokenResponse)
	err := c.cc.Invoke(ctx, "/ataas.passport.PassportSevice/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSeviceClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/ataas.passport.PassportSevice/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSeviceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/ataas.passport.PassportSevice/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSeviceClient) SocialLogin(ctx context.Context, in *SocialRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/ataas.passport.PassportSevice/SocialLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSeviceClient) RevokeToken(ctx context.Context, in *Revoke, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ataas.passport.PassportSevice/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSeviceClient) RevokeAllTokens(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ataas.passport.PassportSevice/RevokeAllTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSeviceClient) Sessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionList, error) {
	out := new(SessionList)
	err := c.cc.Invoke(ctx, "/ataas.passport.PassportSevice/Sessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassportSeviceServer is the server API for PassportSevice service.
// All implementations must embed UnimplementedPassportSeviceServer
// for forward compatibility
type PassportSeviceServer interface {
	VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error)
	Authenticate(context.Context, *AuthRequest) (*AuthResponse, error)
	Refresh(context.Context, *RefreshRequest) (*AuthResponse, error)
	SocialLogin(context.Context, *SocialRequest) (*AuthResponse, error)
	RevokeToken(context.Context, *Revoke) (*Empty, error)
	RevokeAllTokens(context.Context, *Empty) (*Empty, error)
	Sessions(context.Context, *Empty) (*SessionList, error)
	mustEmbedUnimplementedPassportSeviceServer()
}

// UnimplementedPassportSeviceServer must be embedded to have forward compatible implementations.
type UnimplementedPassportSeviceServer struct {
}

func (UnimplementedPassportSeviceServer) VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedPassportSeviceServer) Authenticate(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedPassportSeviceServer) Refresh(context.Context, *RefreshRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedPassportSeviceServer) SocialLogin(context.Context, *SocialRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocialLogin not implemented")
}
func (UnimplementedPassportSeviceServer) RevokeToken(context.Context, *Revoke) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedPassportSeviceServer) RevokeAllTokens(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAllTokens not implemented")
}
func (UnimplementedPassportSeviceServer) Sessions(context.Context, *Empty) (*SessionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sessions not implemented")
}
func (UnimplementedPassportSeviceServer) mustEmbedUnimplementedPassportSeviceServer() {}

// UnsafePassportSeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassportSeviceServer will
// result in compilation errors.
type UnsafePassportSeviceServer interface {
	mustEmbedUnimplementedPassportSeviceServer()
}

func RegisterPassportSeviceServer(s grpc.ServiceRegistrar, srv PassportSeviceServer) {
	s.RegisterService(&PassportSevice_ServiceDesc, srv)
}

func _PassportSevice_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSeviceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ataas.passport.PassportSevice/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSeviceServer).VerifyToken(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSevice_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSeviceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ataas.passport.PassportSevice/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSeviceServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSevice_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSeviceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ataas.passport.PassportSevice/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSeviceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSevice_SocialLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSeviceServer).SocialLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ataas.passport.PassportSevice/SocialLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSeviceServer).SocialLogin(ctx, req.(*SocialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSevice_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Revoke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSeviceServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ataas.passport.PassportSevice/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSeviceServer).RevokeToken(ctx, req.(*Revoke))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSevice_RevokeAllTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSeviceServer).RevokeAllTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ataas.passport.PassportSevice/RevokeAllTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSeviceServer).RevokeAllTokens(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSevice_Sessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSeviceServer).Sessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ataas.passport.PassportSevice/Sessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSeviceServer).Sessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PassportSevice_ServiceDesc is the grpc.ServiceDesc for PassportSevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassportSevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ataas.passport.PassportSevice",
	HandlerType: (*PassportSeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyToken",
			Handler:    _PassportSevice_VerifyToken_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _PassportSevice_Authenticate_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _PassportSevice_Refresh_Handler,
		},
		{
			MethodName: "SocialLogin",
			Handler:    _PassportSevice_SocialLogin_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _PassportSevice_RevokeToken_Handler,
		},
		{
			MethodName: "RevokeAllTokens",
			Handler:    _PassportSevice_RevokeAllTokens_Handler,
		},
		{
			MethodName: "Sessions",
			Handler:    _PassportSevice_Sessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "passport.proto",
}
